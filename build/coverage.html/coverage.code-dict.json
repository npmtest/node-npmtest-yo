{"/home/travis/build/npmtest/node-npmtest-yo/test.js":"/* istanbul instrument in package npmtest_yo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yo/lib.npmtest_yo.js":"/* istanbul instrument in package npmtest_yo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_yo = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_yo = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-yo/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-yo && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_yo */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_yo\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_yo.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_yo.rollup.js'] =\n            local.assetsDict['/assets.npmtest_yo.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_yo.__dirname + '/lib.npmtest_yo.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yo/node_modules/yo/lib/cli.js":"#!/usr/bin/env node\n'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar chalk = require('chalk');\nvar updateNotifier = require('update-notifier');\nvar Insight = require('insight');\nvar yosay = require('yosay');\nvar stringLength = require('string-length');\nvar rootCheck = require('root-check');\nvar meow = require('meow');\nvar list = require('cli-list');\nvar pkg = require('../package.json');\nvar Router = require('./router');\nvar gens = list(process.argv.slice(2));\n\n/* eslint new-cap: 0, no-extra-parens: 0 */\nvar tabtab = new (require('tabtab').Commands.default)({\n  name: 'yo',\n  completer: 'yo-complete'\n});\n\nvar cli = gens.map(function (gen) {\n  var minicli = meow({ help: false, pkg: pkg, argv: gen });\n  var opts = minicli.flags;\n  var args = minicli.input;\n\n  // add un-camelized options too, for legacy\n  // TODO: remove some time in the future when generators have upgraded\n  Object.keys(opts).forEach(function (key) {\n    var legacyKey = key.replace(/[A-Z]/g, function (m) {\n      return '-' + m.toLowerCase();\n    });\n\n    opts[legacyKey] = opts[key];\n  });\n\n  return { opts: opts, args: args };\n});\n\nvar firstCmd = cli[0] || { opts: {}, args: {} };\nvar cmd = firstCmd.args[0];\nvar insight;\n\nfunction updateCheck() {\n  var notifier = updateNotifier({pkg: pkg});\n  var message = [];\n\n  if (notifier.update) {\n    message.push('Update available: ' + chalk.green.bold(notifier.update.latest) + chalk.gray(' (current: ' + notifier.update.current + ')'));\n    message.push('Run ' + chalk.magenta('npm install -g ' + pkg.name) + ' to update.');\n    console.log(yosay(message.join(' '), {maxLength: stringLength(message[0])}));\n  }\n}\n\nfunction pre() {\n  // debugging helper\n  if (cmd === 'doctor') {\n    require('yeoman-doctor')();\n    return;\n  }\n\n  if (cmd === 'completion') {\n    return tabtab.install();\n  }\n\n  // easteregg\n  if (cmd === 'yeoman' || cmd === 'yo') {\n    console.log(require('yeoman-character'));\n    return;\n  }\n\n  init();\n}\n\nfunction createGeneratorList(env) {\n  var generators = Object.keys(env.getGeneratorsMeta()).reduce(function (namesByGenerator, generator) {\n    var parts = generator.split(':');\n    var generatorName = parts.shift();\n    // If first time we found this generator, prepare to save all its sub-generators\n    if (!namesByGenerator[generatorName]) {\n      namesByGenerator[generatorName] = [];\n    }\n    // If sub-generator (!== app), save it\n    if (parts[0] !== 'app') {\n      namesByGenerator[generatorName].push(parts.join(':'));\n    }\n\n    return namesByGenerator;\n  }, {});\n\n  if (!Object.keys(generators).length) {\n    return '  Couldn\\'t find any generators, did you install any? Troubleshoot issues by running\\n\\n  $ yo doctor';\n  }\n\n  return Object.keys(generators).map(function (generator) {\n    var subGenerators = generators[generator].map(function (subGenerator) {\n      return '    ' + subGenerator;\n    }).join('\\n');\n\n    return '  ' + generator + '\\n' + subGenerators;\n  }).join('\\n');\n}\n\nfunction init() {\n  var env = require('yeoman-environment').createEnv();\n\n  env.on('error', function (err) {\n    console.error('Error', process.argv.slice(2).join(' '), '\\n');\n    console.error(firstCmd.opts.debug ? err.stack : err.message);\n    process.exit(err.code || 1);\n  });\n\n  // lookup for every namespaces, within the environments.paths and lookups\n  env.lookup(function () {\n    var generatorList = createGeneratorList(env);\n\n    // list generators\n    if (firstCmd.opts.generators) {\n      console.log('Available Generators:\\n\\n' + generatorList);\n      return;\n    }\n\n    // start the interactive UI if no generator is passed\n    if (!cmd) {\n      if (firstCmd.opts.help) {\n        var usageText = fs.readFileSync(path.join(__dirname, 'usage.txt'), 'utf8');\n        console.log(usageText + '\\nAvailable Generators:\\n\\n' + generatorList);\n        return;\n      }\n\n      runYo(env);\n      return;\n    }\n\n    // Note: at some point, nopt needs to know about the generator options, the\n    // one that will be triggered by the below args. Maybe the nopt parsing\n    // should be done internally, from the args.\n    cli.forEach(function (gen) {\n      env.run(gen.args, gen.opts);\n    });\n  });\n}\n\nfunction runYo(env) {\n  var router = new Router(env, insight);\n  router.insight.track('yoyo', 'init');\n  router.registerRoute('help', require('./routes/help'));\n  router.registerRoute('update', require('./routes/update'));\n  router.registerRoute('run', require('./routes/run'));\n  router.registerRoute('install', require('./routes/install'));\n  router.registerRoute('exit', require('./routes/exit'));\n  router.registerRoute('clearConfig', require('./routes/clear-config'));\n  router.registerRoute('home', require('./routes/home'));\n\n  process.once('exit', router.navigate.bind(router, 'exit'));\n\n  router.updateAvailableGenerators();\n  router.navigate('home');\n}\n\nrootCheck('\\n' + chalk.red('Easy with the `sudo`. Yeoman is the master around here.') + '\\n\\nSince yo is a user command, there is no need to execute it with root\\npermissions. If you\\'re having permission errors when using yo without sudo,\\nplease spend a few minutes learning more about how your system should work\\nand make any necessary repairs.\\n\\nA quick solution would be to change where npm stores global packages by\\nputting ~/npm/bin in your PATH and running:\\n' + chalk.blue('npm config set prefix ~/npm') + '\\n\\nSee: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md');\n\nvar insightMsg = chalk.gray('==========================================================================') +\nchalk.yellow('\\nWe\\'re constantly looking for ways to make ') + chalk.bold.red(pkg.name) +\nchalk.yellow(\n  ' better! \\nMay we anonymously report usage statistics to improve the tool over time? \\n' +\n  'More info: https://github.com/yeoman/insight & http://yeoman.io'\n) +\nchalk.gray('\\n==========================================================================');\n\ninsight = new Insight({\n  trackingCode: 'UA-31537568-1',\n  pkg: pkg\n});\n\nif (firstCmd.opts.insight === false) {\n  insight.config.set('optOut', true);\n} else if (firstCmd.opts.insight) {\n  insight.config.set('optOut', false);\n}\n\nif (firstCmd.opts.insight !== false && insight.optOut === undefined) {\n  insight.optOut = insight.config.get('optOut');\n  insight.track('downloaded');\n  insight.askPermission(insightMsg, pre);\n} else {\n  if (firstCmd.opts.insight !== false) {\n    // only track the two first subcommands\n    insight.track.apply(insight, firstCmd.args.slice(0, 2));\n  }\n\n  updateCheck();\n  pre();\n}\n","/home/travis/build/npmtest/node-npmtest-yo/node_modules/yosay/index.js":"'use strict';\nvar chalk = require('chalk');\nvar pad = require('pad-component');\nvar wrap = require('wrap-ansi');\nvar stringWidth = require('string-width');\nvar stripAnsi = require('strip-ansi');\nvar ansiStyles = require('ansi-styles');\nvar ansiRegex = require('ansi-regex')();\nvar repeating = require('repeating');\nvar cliBoxes = require('cli-boxes');\n\nvar border = cliBoxes.round;\nvar leftOffset = 17;\nvar defaultGreeting =\n  '\\n     _-----_     ' +\n  '\\n    |       |    ' +\n  '\\n    |' + chalk.red('--(o)--') + '|    ' +\n  '\\n   `---------´   ' +\n  '\\n    ' + chalk.yellow('(') + ' _' + chalk.yellow('´U`') + '_ ' + chalk.yellow(')') + '    ' +\n  '\\n    /___A___\\\\   /' +\n  '\\n     ' + chalk.yellow('|  ~  |') + '     ' +\n  '\\n   __' + chalk.yellow('\\'.___.\\'') + '__   ' +\n  '\\n ´   ' + chalk.red('`  |') + '° ' + chalk.red('´ Y') + ' ` ';\n\nmodule.exports = function (message, options) {\n  message = (message || 'Welcome to Yeoman, ladies and gentlemen!').trim();\n  options = options || {};\n\n  /*\n   * What you're about to see may confuse you. And rightfully so. Here's an\n   * explanation.\n   *\n   * When yosay is given a string, we create a duplicate with the ansi styling\n   * sucked out. This way, the true length of the string is read by `pad` and\n   * `wrap`, so they can correctly do their job without getting tripped up by\n   * the \"invisible\" ansi. Along with the duplicated, non-ansi string, we store\n   * the character position of where the ansi was, so that when we go back over\n   * each line that will be printed out in the message box, we check the\n   * character position to see if it needs any styling, then re-insert it if\n   * necessary.\n   *\n   * Better implementations welcome :)\n   */\n\n  var maxLength = 24;\n  var frame;\n  var styledIndexes = {};\n  var completedString = '';\n  var regExNewLine;\n  var topOffset = 4;\n\n  // Amount of characters of the yeoman character »column«      → `    /___A___\\   /`\n  var YEOMAN_CHARACTER_WIDTH = 17;\n\n  // Amount of characters of the default top frame of the speech bubble → `╭──────────────────────────╮`\n  var DEFAULT_TOP_FRAME_WIDTH = 28;\n\n  // Amount of characters of a total line\n  var TOTAL_CHARACTERS_PER_LINE = YEOMAN_CHARACTER_WIDTH + DEFAULT_TOP_FRAME_WIDTH;\n\n  // The speech bubble will overflow the Yeoman character if the message is too long.\n  var MAX_MESSAGE_LINES_BEFORE_OVERFLOW = 7;\n\n  if (options.maxLength) {\n    maxLength = stripAnsi(message).toLowerCase().split(' ').sort()[0].length;\n\n    if (maxLength < options.maxLength) {\n      maxLength = options.maxLength;\n      TOTAL_CHARACTERS_PER_LINE = maxLength + YEOMAN_CHARACTER_WIDTH + topOffset;\n    }\n  }\n\n  regExNewLine = new RegExp('\\\\s{' + maxLength + '}');\n\n  var borderHorizontal = repeating(border.horizontal, maxLength + 2);\n\n  frame = {\n    top: border.topLeft + borderHorizontal + border.topRight,\n    side: ansiStyles.reset.open + border.vertical + ansiStyles.reset.open,\n    bottom: ansiStyles.reset.open + border.bottomLeft + borderHorizontal + border.bottomRight\n  };\n\n  message.replace(ansiRegex, function (match, offset) {\n    Object.keys(styledIndexes).forEach(function (key) {\n      offset -= styledIndexes[key].length;\n    });\n\n    styledIndexes[offset] = styledIndexes[offset] ? styledIndexes[offset] + match : match;\n  });\n\n  return wrap(stripAnsi(message), maxLength, {hard: true})\n    .split(/\\n/)\n    .reduce(function (greeting, str, index, array) {\n      var paddedString;\n\n      if (!regExNewLine.test(str)) {\n        str = str.trim();\n      }\n\n      completedString += str;\n\n      str = completedString\n        .substr(completedString.length - str.length)\n        .replace(/./g, function (char, charIndex) {\n          if (index > 0) {\n            charIndex += completedString.length - str.length + index;\n          }\n\n          var hasContinuedStyle = 0;\n          var continuedStyle;\n\n          Object.keys(styledIndexes).forEach(function (offset) {\n            if (charIndex > offset) {\n              hasContinuedStyle++;\n              continuedStyle = styledIndexes[offset];\n            }\n\n            if (hasContinuedStyle === 1 && charIndex < offset) {\n              hasContinuedStyle++;\n            }\n          });\n\n          if (styledIndexes[charIndex]) {\n            return styledIndexes[charIndex] + char;\n          } else if (hasContinuedStyle >= 2) {\n            return continuedStyle + char;\n          }\n\n          return char;\n        })\n        .trim();\n\n      paddedString = pad({\n        length: stringWidth(str),\n        valueOf: function () {\n          return ansiStyles.reset.open + str + ansiStyles.reset.open;\n        }\n      }, maxLength);\n\n      if (index === 0) {\n        // Need to adjust the top position of the speech bubble depending on the\n        // amount of lines of the message.\n        if (array.length === 2) {\n          topOffset -= 1;\n        }\n\n        if (array.length >= 3) {\n          topOffset -= 2;\n        }\n\n        // The speech bubble will overflow the Yeoman character if the message\n        // is too long. So we vertically center the bubble by adding empty lines\n        // on top of the greeting.\n        if (array.length > MAX_MESSAGE_LINES_BEFORE_OVERFLOW) {\n          var emptyLines = Math.ceil((array.length - MAX_MESSAGE_LINES_BEFORE_OVERFLOW) / 2);\n\n          for (var i = 0; i < emptyLines; i++) {\n            greeting.unshift('');\n          }\n\n          frame.top = pad.left(frame.top, TOTAL_CHARACTERS_PER_LINE);\n        }\n\n        greeting[topOffset - 1] += frame.top;\n      }\n\n      greeting[index + topOffset] =\n        (greeting[index + topOffset] || pad.left('', leftOffset)) +\n        frame.side + ' ' + paddedString + ' ' + frame.side;\n\n      if (array.length === index + 1) {\n        greeting[index + topOffset + 1] =\n          (greeting[index + topOffset + 1] || pad.left('', leftOffset)) +\n          frame.bottom;\n      }\n\n      return greeting;\n    }, defaultGreeting.split(/\\n/))\n    .join('\\n') + '\\n';\n};\n","/home/travis/build/npmtest/node-npmtest-yo/node_modules/yo/lib/router.js":"'use strict';\nvar path = require('path');\nvar _ = require('lodash');\nvar titleize = require('titleize');\nvar humanizeString = require('humanize-string');\nvar readPkgUp = require('read-pkg-up');\nvar updateNotifier = require('update-notifier');\nvar Configstore = require('configstore');\nvar namespaceToName = require('yeoman-environment').namespaceToName;\n\n/**\n * The router is in charge of handling `yo` different screens.\n * @constructor\n * @param  {Environment} env A yeoman environment instance\n * @param  {Insight} insight An insight instance\n * @param  {Configstore} [conf] An optionnal config store instance\n */\nvar Router = module.exports = function (env, insight, conf) {\n  var pkg = require('../package.json');\n  this.routes = {};\n  this.env = env;\n  this.insight = insight;\n  this.conf = conf || new Configstore(pkg.name, {\n    generatorRunCount: {}\n  });\n};\n\n/**\n * Navigate to a route\n * @param  {String} name Route name\n * @param  {*}      arg  A single argument to pass to the route handler\n */\nRouter.prototype.navigate = function (name, arg) {\n  if (typeof this.routes[name] === 'function') {\n    return this.routes[name].call(null, this, arg);\n  }\n\n  throw new Error('no routes called: ' + name);\n};\n\n/**\n * Register a route handler\n * @param {String}   name    Name of the route\n * @param {Function} handler Route handler\n */\nRouter.prototype.registerRoute = function (name, handler) {\n  this.routes[name] = handler;\n  return this;\n};\n\n/**\n * Update the available generators in the app\n * TODO: Move this function elsewhere, try to make it stateless.\n */\nRouter.prototype.updateAvailableGenerators = function () {\n  this.generators = {};\n\n  var resolveGenerators = function (generator) {\n    // Skip sub generators\n    if (!/:(app|all)$/.test(generator.namespace)) {\n      return;\n    }\n\n    var pkg = readPkgUp.sync({cwd: path.dirname(generator.resolved)}).pkg;\n\n    if (!pkg) {\n      return;\n    }\n\n    pkg.namespace = generator.namespace;\n    pkg.appGenerator = true;\n    pkg.prettyName = titleize(humanizeString(namespaceToName(generator.namespace)));\n\n    pkg.update = updateNotifier({pkg: pkg}).update;\n\n    if (pkg.update && pkg.version !== pkg.update.latest) {\n      pkg.updateAvailable = true;\n    }\n\n    this.generators[pkg.name] = pkg;\n  };\n\n  _.each(this.env.getGeneratorsMeta(), resolveGenerators, this);\n};\n"}